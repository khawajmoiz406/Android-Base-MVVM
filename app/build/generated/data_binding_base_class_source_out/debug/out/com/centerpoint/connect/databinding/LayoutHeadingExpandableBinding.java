// Generated by data binding compiler. Do not edit!
package com.centerpoint.connect.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.centerpoint.connect.R;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class LayoutHeadingExpandableBinding extends ViewDataBinding {
  @NonNull
  public final ConstraintLayout llMain;

  @NonNull
  public final TextView tvHSubDescription;

  @NonNull
  public final TextView tvHSubHeading;

  @NonNull
  public final TextView tvHeading;

  @NonNull
  public final View viewLine;

  protected LayoutHeadingExpandableBinding(Object _bindingComponent, View _root,
      int _localFieldCount, ConstraintLayout llMain, TextView tvHSubDescription,
      TextView tvHSubHeading, TextView tvHeading, View viewLine) {
    super(_bindingComponent, _root, _localFieldCount);
    this.llMain = llMain;
    this.tvHSubDescription = tvHSubDescription;
    this.tvHSubHeading = tvHSubHeading;
    this.tvHeading = tvHeading;
    this.viewLine = viewLine;
  }

  @NonNull
  public static LayoutHeadingExpandableBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.layout_heading_expandable, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static LayoutHeadingExpandableBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<LayoutHeadingExpandableBinding>inflateInternal(inflater, R.layout.layout_heading_expandable, root, attachToRoot, component);
  }

  @NonNull
  public static LayoutHeadingExpandableBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.layout_heading_expandable, null, false, component)
   */
  @NonNull
  @Deprecated
  public static LayoutHeadingExpandableBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<LayoutHeadingExpandableBinding>inflateInternal(inflater, R.layout.layout_heading_expandable, null, false, component);
  }

  public static LayoutHeadingExpandableBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static LayoutHeadingExpandableBinding bind(@NonNull View view,
      @Nullable Object component) {
    return (LayoutHeadingExpandableBinding)bind(component, view, R.layout.layout_heading_expandable);
  }
}
